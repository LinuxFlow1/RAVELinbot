import os
import json
import logging
import uuid
from typing import Dict, List, Optional, Set

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, 
    WebAppInfo, User as TelegramUser, Message
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö
class Room:
    def __init__(self, creator_id: int, video_url: str, title: str = ""):
        self.id = str(uuid.uuid4())
        self.creator_id = creator_id
        self.video_url = video_url
        self.title = title or f"–ö–æ–º–Ω–∞—Ç–∞ {self.id[:8]}"
        self.viewers: Set[int] = {creator_id}  # –ª–æ–∫–µ—Ä—ã (–∑—Ä–∏—Ç–µ–ª–∏)
        self.banned_users: Set[int] = set()
        self.messages: List[Dict] = []
    
    def to_dict(self):
        return {
            "id": self.id,
            "creator_id": self.creator_id,
            "video_url": self.video_url,
            "title": self.title,
            "viewers": list(self.viewers),
            "banned_users": list(self.banned_users),
            "messages": self.messages
        }
    
    @classmethod
    def from_dict(cls, data):
        room = cls(data["creator_id"], data["video_url"], data["title"])
        room.id = data["id"]
        room.viewers = set(data["viewers"])
        room.banned_users = set(data["banned_users"])
        room.messages = data["messages"]
        return room

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç
rooms: Dict[str, Room] = {}
user_current_room: Dict[int, str] = {}  # user_id -> room_id

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
def save_state():
    state = {
        "rooms": {room_id: room.to_dict() for room_id, room in rooms.items()},
        "user_current_room": user_current_room
    }
    with open("state.json", "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=2)

def load_state():
    global rooms, user_current_room
    try:
        with open("state.json", "r", encoding="utf-8") as f:
            state = json.load(f)
            rooms = {room_id: Room.from_dict(room_data) for room_id, room_data in state["rooms"].items()}
            user_current_room = state["user_current_room"]
    except (FileNotFoundError, json.JSONDecodeError):
        rooms = {}
        user_current_room = {}

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É –∫–æ–º–∞–Ω–¥—ã start (–¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö —Å—Å—ã–ª–æ–∫)
    if context.args and context.args[0].startswith("join_"):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from message_handlers import handle_command_with_args
        await handle_command_with_args(update, context)
        return
    
    await update.message.reply_html(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n"
        f"–≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–ª–µ Rave.\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/create [—Å—Å—ã–ª–∫–∞] [–Ω–∞–∑–≤–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É\n"
        f"/join [id_–∫–æ–º–Ω–∞—Ç—ã] - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ\n"
        f"/rooms - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç\n"
        f"/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å",
        reply_markup=get_main_keyboard()
    )

def get_main_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π."""
    keyboard = [
        [
            InlineKeyboardButton("üé• –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="create_room"),
            InlineKeyboardButton("üö™ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_room")
        ],
        [
            InlineKeyboardButton("üè† –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã", callback_data="list_rooms"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_room_keyboard(room_id: str, is_creator: bool):
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–º–Ω–∞—Ç—ã."""
    keyboard = [
        [
            InlineKeyboardButton("üí¨ –ß–∞—Ç", callback_data=f"chat_{room_id}"),
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"viewers_{room_id}")
        ],
        [
            InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_{room_id}"),
            InlineKeyboardButton("üö™ –í—ã–π—Ç–∏", callback_data="leave_room")
        ]
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã
    if is_creator:
        keyboard.append([
            InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ", callback_data=f"change_video_{room_id}"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"settings_{room_id}")
        ])
    
    return InlineKeyboardMarkup(keyboard)

async def create_room_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    user_id = update.effective_user.id
    args = context.args
    
    if not args or len(args) < 1:
        await update.message.reply_text(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:\n"
            "/create [—Å—Å—ã–ª–∫–∞] [–Ω–∞–∑–≤–∞–Ω–∏–µ - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ]"
        )
        return
    
    video_url = args[0]
    title = " ".join(args[1:]) if len(args) > 1 else ""
    
    room = Room(user_id, video_url, title)
    rooms[room.id] = room
    user_current_room[user_id] = room.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_state()
    
    await update.message.reply_text(
        f"üé¨ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {room.title}\n"
        f"üîó –í–∏–¥–µ–æ: {video_url}\n"
        f"üÜî ID –∫–æ–º–Ω–∞—Ç—ã: `{room.id}`\n\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 1\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π:\n"
        f"https://t.me/{context.bot.username}?start=join_{room.id}",
        parse_mode="Markdown",
        reply_markup=get_room_keyboard(room.id, True)
    )

async def join_room_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ."""
    user_id = update.effective_user.id
    args = context.args
    
    if not args:
        await update.message.reply_text(
            "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã:\n"
            "/join [id_–∫–æ–º–Ω–∞—Ç—ã]"
        )
        return
    
    room_id = args[0]
    
    if room_id not in rooms:
        await update.message.reply_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    room = rooms[room_id]
    
    if user_id in room.banned_users:
        await update.message.reply_text("‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
    room.viewers.add(user_id)
    user_current_room[user_id] = room_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_state()
    
    is_creator = user_id == room.creator_id
    
    await update.message.reply_text(
        f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ!\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {room.title}\n"
        f"üîó –í–∏–¥–µ–æ: {room.video_url}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room.viewers)}\n",
        reply_markup=get_room_keyboard(room_id, is_creator)
    )

async def list_rooms_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç."""
    if not rooms:
        await update.message.reply_text(
            "üè† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å –ø–æ–º–æ—â—å—é /create [—Å—Å—ã–ª–∫–∞] [–Ω–∞–∑–≤–∞–Ω–∏–µ]",
            reply_markup=get_main_keyboard()
        )
        return
    
    rooms_text = "üè† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:\n\n"
    
    for room_id, room in rooms.items():
        rooms_text += f"üìù {room.title}\n"
        rooms_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room.viewers)}\n"
        rooms_text += f"üÜî ID: `{room_id}`\n\n"
    
    await update.message.reply_text(
        rooms_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞."""
    await update.message.reply_text(
        "üåü *Rave Bot - —Å–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ* üåü\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/create [—Å—Å—ã–ª–∫–∞] [–Ω–∞–∑–≤–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É\n"
        "/join [id_–∫–æ–º–Ω–∞—Ç—ã] - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ\n"
        "/rooms - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ù–∞—Ö–æ–¥—è—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –û–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n"
        "- –í–∏–¥–µ—Ç—å, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ\n"
        "- –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–º–Ω–∞—Ç–æ–π —Å –¥—Ä—É–∑—å—è–º–∏\n\n"
        "–°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç:\n"
        "- –ú–µ–Ω—è—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n"
        "- –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–Ω–∞—Ç—ã\n"
        "- –ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é /ban [user_id]\n"
        "- –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–º–æ—â—å—é /unban [user_id]",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "create_room":
        await query.message.reply_text(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "/create [—Å—Å—ã–ª–∫–∞] [–Ω–∞–∑–≤–∞–Ω–∏–µ - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ]"
        )
    
    elif data == "join_room":
        await query.message.reply_text(
            "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "/join [id_–∫–æ–º–Ω–∞—Ç—ã]"
        )
    
    elif data == "list_rooms":
        await list_rooms_command(update, context)
    
    elif data == "help":
        await help_command(update, context)
    
    elif data == "leave_room":
        if user_id not in user_current_room:
            await query.message.reply_text("‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.")
            return
        
        room_id = user_current_room[user_id]
        room = rooms[room_id]
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        room.viewers.discard(user_id)
        del user_current_room[user_id]
        
        # –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
        if not room.viewers:
            del rooms[room_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        save_state()
        
        await query.message.reply_text(
            "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã.",
            reply_markup=get_main_keyboard()
        )
    
    elif data.startswith("chat_"):
        room_id = data.split("_")[1]
        if room_id not in rooms:
            await query.message.reply_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        room = rooms[room_id]
        
        if user_id in room.banned_users:
            await query.message.reply_text("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        from message_handlers import get_room_messages
        messages = get_room_messages(room_id, 10)
        
        chat_text = f"üí¨ –ß–∞—Ç –∫–æ–º–Ω–∞—Ç—ã {room.title}\n\n"
        
        if not messages:
            chat_text += "–í —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤–æ–µ!\n\n"
        else:
            for msg in messages:
                chat_text += f"[{msg['user_name']}]: {msg['text']}\n"
            chat_text += "\n"
        
        chat_text += "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ —á–∞—Ç."
        
        await query.message.reply_text(chat_text)
    
    elif data.startswith("viewers_"):
        room_id = data.split("_")[1]
        if room_id not in rooms:
            await query.message.reply_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        room = rooms[room_id]
        viewers_text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã {room.title}:\n\n"
        
        for viewer_id in room.viewers:
            try:
                user = await context.bot.get_chat(viewer_id)
                name = user.first_name
                if user.last_name:
                    name += f" {user.last_name}"
                if viewer_id == room.creator_id:
                    name += " üëë"
                viewers_text += f"- {name}\n"
            except:
                viewers_text += f"- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {viewer_id}\n"
        
        await query.message.reply_text(viewers_text)
    
    elif data.startswith("share_"):
        room_id = data.split("_")[1]
        if room_id not in rooms:
            await query.message.reply_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        room = rooms[room_id]
        
        await query.message.reply_text(
            f"üîó –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –≤ –∫–æ–º–Ω–∞—Ç—É {room.title}:\n\n"
            f"https://t.me/{context.bot.username}?start=join_{room_id}\n\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º ID –∫–æ–º–Ω–∞—Ç—ã: `{room_id}`",
            parse_mode="Markdown"
        )
    
    elif data.startswith("change_video_"):
        room_id = data.split("_")[2]
        if room_id not in rooms:
            await query.message.reply_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        room = rooms[room_id]
        
        if user_id != room.creator_id:
            await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≤–∏–¥–µ–æ.")
            return
        
        await query.message.reply_text(
            "üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "/change_video [—Å—Å—ã–ª–∫–∞]"
        )
    
    elif data.startswith("settings_"):
        room_id = data.split("_")[1]
        if room_id not in rooms:
            await query.message.reply_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        room = rooms[room_id]
        
        if user_id != room.creator_id:
            await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return
        
        settings_keyboard = [
            [
                InlineKeyboardButton("üîí –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"ban_user_{room_id}"),
                InlineKeyboardButton("üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"unban_user_{room_id}")
            ],
            [
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data=f"delete_room_{room_id}"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_room_{room_id}")
            ]
        ]
        
        await query.message.reply_text(
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã {room.title}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(settings_keyboard)
        )
    
    elif data.startswith("ban_user_"):
        room_id = data.split("_")[2]
        if room_id not in rooms:
            await query.message.reply_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        room = rooms[room_id]
        
        if user_id != room.creator_id:
            await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        await query.message.reply_text(
            "üîí –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "/ban [user_id]"
        )
    
    elif data.startswith("unban_user_"):
        room_id = data.split("_")[2]
        if room_id not in rooms:
            await query.message.reply_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        room = rooms[room_id]
        
        if user_id != room.creator_id:
            await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        if not room.banned_users:
            await query.message.reply_text("‚úÖ –í –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        banned_text = "üîì –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        for banned_id in room.banned_users:
            banned_text += f"- ID: {banned_id}\n"
        
        banned_text += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/unban [user_id]"
        
        await query.message.reply_text(banned_text)
    
    elif data.startswith("delete_room_"):
        room_id = data.split("_")[2]
        if room_id not in rooms:
            await query.message.reply_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        room = rooms[room_id]
        
        if user_id != room.creator_id:
            await query.message.reply_text("‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É.")
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É –∏ –æ—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for viewer_id in list(room.viewers):
            if viewer_id in user_current_room and user_current_room[viewer_id] == room_id:
                del user_current_room[viewer_id]
        
        del rooms[room_id]
        save_state()
        
        await query.message.reply_text(
            "üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
    
    elif data.startswith("back_to_room_"):
        room_id = data.split("_")[3]
        if room_id not in rooms:
            await query.message.reply_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        room = rooms[room_id]
        is_creator = user_id == room.creator_id
        
        await query.message.reply_text(
            f"üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∫–æ–º–Ω–∞—Ç—É {room.title}",
            reply_markup=get_room_keyboard(room_id, is_creator)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
async def change_video_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–∑–º–µ–Ω—è–µ—Ç –≤–∏–¥–µ–æ –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    user_id = update.effective_user.id
    args = context.args
    
    if not args:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ:\n"
            "/change_video [—Å—Å—ã–ª–∫–∞]"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ
    if user_id not in user_current_room:
        await update.message.reply_text(
            "‚ùå –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ."
        )
        return
    
    room_id = user_current_room[user_id]
    room = rooms.get(room_id)
    
    if not room:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç—ã
    if user_id != room.creator_id:
        await update.message.reply_text(
            "‚õî –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –≤–∏–¥–µ–æ."
        )
        return
    
    # –ú–µ–Ω—è–µ–º –≤–∏–¥–µ–æ
    old_video_url = room.video_url
    room.video_url = args[0]
    save_state()
    
    await update.message.reply_text(
        f"‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        f"–°—Ç–∞—Ä–æ–µ –≤–∏–¥–µ–æ: {old_video_url}\n"
        f"–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ: {room.video_url}",
        reply_markup=get_room_keyboard(room_id, True)
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    load_state()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("create", create_room_command))
    application.add_handler(CommandHandler("join", join_room_command))
    application.add_handler(CommandHandler("rooms", list_rooms_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("change_video", change_video_command))
    application.add_handler(CommandHandler("ban", lambda update, context: handle_command_with_args(update, context)))
    application.add_handler(CommandHandler("unban", lambda update, context: handle_command_with_args(update, context)))
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    from message_handlers import handle_text_message, handle_command_with_args
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main() 